{
  "version": 3,
  "file": "git-ipfs.js",
  "sourceRoot": "",
  "sources": [
    "git-ipfs.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\r\n  git-ipfs.coffee\r\n  Created by Zefram Lou (Zebang Liu) as part of the WikiGit project.\r\n\r\n  This file implements a daemon that listens for the TaskSolutionAccepted() event\r\n  from the GitHandler module. Upon such an event, the daemon would clone the\r\n  DASP's Git repo, pull from the updated repo where the task has been completed\r\n  to merge the solution into the DASP's repo, publish the resulting repo onto IPFS,\r\n  and send its IPFS multihash back to GitHandler as the current location of the DASP's repo.\r\n###\r\n\r\nimport {DASP_Address} from '../ui/dasp_dashboard.js'\r\n\r\n#Import web3\r\nWeb3 = require 'web3'\r\nweb3 = new Web3();\r\nif web3.currentProvider == null\r\n  web3.setProvider(new Web3.providers.HttpProvider(\"http://localhost:8545\"))\r\n\r\n#Import node modules\r\nipfsAPI = require 'ipfs-api'\r\nipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'})\r\ngit = require 'gift'\r\nfs = require 'fs'\r\nkeccak256 = require('js-sha3').keccak256\r\n\r\n#Helper functions\r\nhexToStr = (hex) ->\r\n  hex = hex.substr(2)\r\n  str = ''\r\n  for i in [0..hex.length - 1] by 2\r\n    str += String.fromCharCode(parseInt(hex.substr(i, 2), 16))\r\n  return str\r\n\r\n#Initialize main contract\r\nmainAddr = DASP_Address.get()\r\nmainAbi = require '../abi/mainABI.json'\r\nmainContract = new web3.eth.Contract(mainAbi, mainAddr)\r\n\r\ntasksHandlerAddr = tasksHandlerContract = null\r\ngitHandlerAddr = gitHandlerContract = null\r\n\r\n#Get TasksHandler address\r\nmainContract.methods.moduleAddresses('0x' + keccak256('TASKS')).call().then(\r\n  (result) ->\r\n    #Initialize TaskHandler module\r\n    tasksHandlerAddr = result\r\n    return main.methods.getABIHashForMod('0x' + keccak256('TASKS')).call().then(\r\n      (abiHash) ->\r\n        return new Promise((fullfill, reject) ->\r\n          ipfs.files.cat(hexToStr(abiHash),\r\n            (error, stream) ->\r\n              if error != null\r\n                reject(error)\r\n              stream.pipe(bl((error, data) ->\r\n                if error != null\r\n                  reject(error)\r\n                abi = JSON.parse(data.toString()).abi\r\n                tasksHandlerContract = new web3.eth.Contract(abi, tasksHandlerAddr)\r\n                fullfill()\r\n                return\r\n              ))\r\n              return\r\n          )\r\n        )\r\n    )\r\n).then(\r\n  () ->\r\n    #Get GitHandler address\r\n    return mainContract.methods.moduleAddresses('0x' + keccak256('GIT')).call().then(\r\n      (result) ->\r\n        #Initialize GitHandler module\r\n        gitHandlerAddr = result\r\n        return main.methods.getABIHashForMod('0x' + keccak256('GIT')).call().then(\r\n          (abiHash) ->\r\n            return new Promise((fullfill, reject) ->\r\n              ipfs.files.cat(hexToStr(abiHash),\r\n                (error, stream) ->\r\n                  if error != null\r\n                    reject(error)\r\n                  stream.pipe(bl((error, data) ->\r\n                    if error != null\r\n                      reject(error)\r\n                    abi = JSON.parse(data.toString()).abi\r\n                    gitHandlerContract = new web3.eth.Contract(abi, gitHandlerAddr)\r\n                    fullfill()\r\n                    return\r\n                  ))\r\n                  return\r\n              )\r\n            )\r\n        )\r\n    )\r\n).then(\r\n  () ->\r\n    #Listen for solution accepted event\r\n    solutionAcceptedEvent = tasksHandlerContract.events.TaskSolutionAccepted()\r\n    return solutionAcceptedEvent.on('data', (event) ->\r\n      patchIPFSHash = hexToStr event.returnValues.patchIPFSHash\r\n      gitHandlerContract.methods.getCurrentIPFSHash().call().then(\r\n        (result) ->\r\n          masterIPFSHash = hexToStr result\r\n          masterPath = \"./tmp/#{masterIPFSHash}/\"\r\n\r\n          #Create repo directory if it doesn't exist\r\n          if !fs.existsSync(masterPath)\r\n            if !fs.existsSync('./tmp')\r\n              fs.mkdirSync('./tmp')\r\n            fs.mkdirSync(masterPath)\r\n\r\n          #Clone the master\r\n          git.clone(\"git@gateway.ipfs.io/ipfs/\" + masterIPFSHash.toString(), masterPath, Number.POSITIVE_INFINITY, \"master\", (error, _repo) ->\r\n            if error != null\r\n              throw error\r\n            repo = _repo\r\n            #Add patched repo as remote\r\n            repo.remote_add(\"solution\", \"gateway.ipfs.io/ipfs/#{patchIPFSHash}\", (error) ->\r\n              if error != null\r\n                throw error\r\n              #Pull the patched repo and merge with the master\r\n              repo.pull(\"solution\", \"master\", (error) ->\r\n                if error != null\r\n                  throw error\r\n                #Add new repo to the IPFS network\r\n                ipfs.util.addFromFs(masterPath, {recursive: true}, (error, result) ->\r\n                  if error != null\r\n                    throw error\r\n                  for entry in result\r\n                    if entry.path is masterIPFSHash\r\n                      gitHandlerContract.methods.commitTaskSolutionToRepo(\r\n                        event.returnValues.taskId,\r\n                        event.returnValues.solId,\r\n                        entry.hash\r\n                      ).send()\r\n                      break\r\n                )\r\n              )\r\n            )\r\n          )\r\n      )\r\n    )\r\n)\r\n"
  ]
}
// Generated by CoffeeScript 1.12.7
(function() {
  var dao, git, git_handler, ipfs, ipfsAPI, main, member_handler, tasks_handler, vault;

  main = artifacts.require('Main');

  dao = artifacts.require('Dao');

  member_handler = artifacts.require('MemberHandler');

  vault = artifacts.require('Vault');

  tasks_handler = artifacts.require('TasksHandler');

  git_handler = artifacts.require('GitHandler');

  ipfsAPI = require('ipfs-api');

  ipfs = ipfsAPI('localhost', '5001', {
    protocol: 'http'
  });

  git = require('gift');

  module.exports = (function(_this) {
    return function(deployer) {
      return deployer.deploy(main, 'Test Metadata').then(function() {
        var newHash, repoPath;
        repoPath = './tmp/repo';
        newHash = '';
        return git.init(repoPath, true, function(err, _repo) {
          var repo;
          repo = _repo;
          return ipfs.util.addFromFs(repoPath, {
            recursive: true
          }, (function(_this) {
            return function(error, result) {
              var decode, entry, i, len;
              if (error === null) {
                for (i = 0, len = result.length; i < len; i++) {
                  entry = result[i];
                  if (entry.path === 'repo') {
                    newHash = entry.hash;
                    break;
                  }
                }
                decode = function(dec) {
                  var alphabet, alphabetPosition, base, decoded, powerOf;
                  alphabet = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';
                  base = alphabet.length;
                  decoded = 0;
                  while (dec) {
                    alphabetPosition = alphabet.indexOf(dec[0]);
                    powerOf = dec.length - 1;
                    decoded += alphabetPosition * (Math.pow(base, powerOf));
                    dec = dec.substring(1);
                  }
                  return decoded;
                };
                return deployer.deploy([[dao, main.address], [member_handler, 'Test Username', main.address], [vault, main.address], [tasks_handler, main.address], [git_handler, main.address, newHash.slice(2), decode(newHash.slice(0, 1), decode(newHash.slice(1, 2)))]]).then(function() {
                  return main.deployed().then(function(instance) {
                    return instance.initializeModuleAddresses([dao.address, member_handler.address, vault.address, tasks_handler.address, git_handler.address]);
                  });
                }).then(function() {
                  return dao.deployed().then(function(instance) {
                    return instance.init();
                  });
                });
              }
            };
          })(this));
        });
      });
    };
  })(this);

}).call(this);

//# sourceMappingURL=2_core_contracts.js.map

{
  "version": 3,
  "file": "2_core_contracts.js",
  "sourceRoot": "",
  "sources": [
    "2_core_contracts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\r\n  2_core_contracts.coffee\r\n  Created by Zefram Lou (Zebang Liu) as part of the WikiGit project.\r\n\r\n  This file defines the deployment process of the core contracts of\r\n  the DASP. In addition, it initializes the DASP's Git repo,\r\n  publishes it onto the IPFS network, and saves its hash in the\r\n  GitHandler module.\r\n###\r\n\r\n#Initialize contract abstractions\r\nmain = artifacts.require 'Main'\r\ndao = artifacts.require 'Dao'\r\nmember_handler = artifacts.require 'MemberHandler'\r\nvault = artifacts.require 'Vault'\r\ntasks_handler = artifacts.require 'TasksHandler'\r\ngit_handler = artifacts.require 'GitHandler'\r\n\r\n#Import node modules\r\nipfsAPI = require 'ipfs-api'\r\nipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'})\r\ngit = require 'gift'\r\nfs = require 'fs'\r\n\r\n#Import config\r\nconfig = require './config.json'\r\n\r\nmodule.exports = (deployer) ->\r\n  abiPath = './build/contracts/'\r\n  ipfs.util.addFromFs(abiPath, {recursive: true}, (error, abiFiles) ->\r\n    if error != null\r\n      throw error\r\n\r\n    getABIHash = (modName) ->\r\n      for f in abiFiles\r\n        if f.path == \"contracts/#{modName}.json\"\r\n          return f.hash\r\n\r\n    mainHash = getABIHash('Main')\r\n    #Deploy main contract\r\n    deployer.deploy(main, config.main_metadata, mainHash).then(\r\n      () ->\r\n        repoPath = './tmp/repo.git'\r\n\r\n        #Create repo directory if it doesn't exist\r\n        if !fs.existsSync(repoPath)\r\n          if !fs.existsSync('./tmp')\r\n            fs.mkdirSync('./tmp')\r\n          fs.mkdirSync(repoPath)\r\n\r\n        newHash = ''\r\n        #Initialize Git repo\r\n        git.init(repoPath, true, (error, _repo) ->\r\n          if error != null\r\n            throw error\r\n          #Add repo to the IPFS network\r\n          ipfs.util.addFromFs(repoPath, {recursive: true}, (error, result) ->\r\n            if error != null\r\n              throw error\r\n            #Get repo's IPFS multihash\r\n            newHash = result[result.length - 1].hash\r\n            #Deploy core modules\r\n            deployer.deploy([\r\n              [dao, main.address],\r\n              [member_handler, config.member_init_username, main.address],\r\n              [vault, main.address],\r\n              [tasks_handler, main.address],\r\n              [git_handler, newHash, main.address]\r\n            ]).then(\r\n              () ->\r\n                #Add core module addresses to main contract\r\n                return main.deployed().then(\r\n                  (instance) ->\r\n                    return instance.initializeModuleAddresses([\r\n                      dao.address,\r\n                      member_handler.address,\r\n                      vault.address,\r\n                      tasks_handler.address,\r\n                      git_handler.address\r\n                    ])\r\n                )\r\n            ).then(\r\n              () ->\r\n                #Initialize the DAO\r\n                return dao.deployed().then(\r\n                  (instance) ->\r\n                    return instance.init()\r\n                )\r\n            ).then(\r\n              () ->\r\n                #Initialize the ABI hashes\r\n                modAbsNames = ['Dao', 'MemberHandler', 'Vault', 'TasksHandler', 'GitHandler']\r\n                return main.deployed().then(\r\n                  (instance) ->\r\n                    initABIHashForMod = (modId) ->\r\n                      return instance.initializeABIHashForMod(modId, getABIHash(modAbsNames[modId]))\r\n                    return Promise.all(initABIHashForMod(modId) for modId in [0..4])\r\n                )\r\n            )\r\n          )\r\n        )\r\n    )\r\n  )\r\n\r\n"
  ]
}
// Generated by CoffeeScript 1.12.6
(function() {
  var Web3, git, gitHandlerAbi, gitHandlerAddr, gitHandlerContract, ipfs, ipfsAPI, keccak256, mainAbi, mainAddr, mainContract, solutionAcceptedEvent, tasksHandlerAbi, tasksHandlerAddr, tasksHandlerContract, web3;

  Web3 = require('web3');

  keccak256 = require('js-sha3').keccak256;

  if (web3 === void 0) {
    web3 = new Web3(Web3.providers.HttpProvider("http://localhost:8545"));
  } else {
    web3 = new Web3(web3.currentProvider);
  }

  ipfsAPI = require('ipfs-api');

  ipfs = ipfsAPI('localhost', '5001', {
    protocol: 'http'
  });

  git = require('gift');

  mainAddr = "";

  mainAbi = require('./abi/mainABI.json');

  mainContract = new web3.eth.Contract(mainAbi, mainAddr);

  tasksHandlerAddr = mainContract.methods.moduleAddresses(keccak256('TASKS'));

  tasksHandlerAbi = require('./abi/tasksHandlerABI.json');

  tasksHandlerContract = new web3.eth.Contract(tasksHandlerAbi, tasksHandlerAddr);

  gitHandlerAddr = mainContract.methods.moduleAddresses(keccak256('GIT'));

  gitHandlerAbi = require('./abi/gitHandlerABI.json');

  gitHandlerContract = new web3.eth.Contract(gitHandlerAbi, gitHandlerAddr);

  solutionAcceptedEvent = tasksHandlerContract.events.TaskSolutionAccepted();

  solutionAcceptedEvent.watch((function(_this) {
    return function(error, event) {
      var masterIPFSHash, masterPath, patchIPFSHash;
      patchIPFSHash = event.returnValues.patchIPFSHash;
      masterIPFSHash = gitHandlerContract.methods.getCurrentIPFSHash;
      masterPath = "./tmp/" + masterIPFSHash + "/";
      return git.clone("git@gateway.ipfs.io/ipfs/" + masterIPFSHash.toString(), masterPath, Number.POSITIVE_INFINITY, "master", function(erro, _repo) {
        var repo;
        repo = _repo;
        return repo.remote_add("solution", "gateway.ipfs.io/ipfs/" + patchIPFSHash, (function(_this) {
          return function(err) {
            return repo.pull("solution", "master", function(er) {
              return ipfs.util.addFromFs(masterPath, {
                recursive: true
              }, function(e, result) {
                var entry, i, len, newHash;
                for (i = 0, len = result.length; i < len; i++) {
                  entry = result[i];
                  if (entry.path === masterIPFSHash) {
                    newHash = entry.hash;
                  }
                }
                return gitHandlerContract.methods.commitTaskSolutionToRepo(event.returnValues.taskId, event.returnValues.solId, newHash);
              });
            });
          };
        })(this));
      });
    };
  })(this));

}).call(this);

//# sourceMappingURL=git-ipfs.js.map

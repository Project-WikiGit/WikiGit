// Generated by CoffeeScript 1.12.7
(function() {
  var Web3, git, ipfs, ipfsAPI, keccak256, mainAbi, mainAddr, mainContract, web3;

  Web3 = require('web3');

  keccak256 = require('js-sha3').keccak256;

  web3 = new Web3();

  web3.setProvider(new Web3.providers.HttpProvider("http://localhost:8545"));

  ipfsAPI = require('ipfs-api');

  ipfs = ipfsAPI('localhost', '5001', {
    protocol: 'http'
  });

  git = require('gift');

  mainAddr = "0xe5418a9403b676f3b3623a16f0d6b2ed26ce7411";

  mainAbi = require('./abi/mainABI.json');

  mainContract = new web3.eth.Contract(mainAbi, mainAddr);

  mainContract.methods.moduleAddresses('0x' + keccak256('TASKS')).call().then((function(_this) {
    return function(result) {
      var tasksHandlerAbi, tasksHandlerAddr, tasksHandlerContract;
      tasksHandlerAddr = result;
      tasksHandlerAbi = require('./abi/tasksHandlerABI.json');
      tasksHandlerContract = new web3.eth.Contract(tasksHandlerAbi, tasksHandlerAddr);
      return mainContract.methods.moduleAddresses('0x' + keccak256('GIT')).call().then(function(r) {
        var gitHandlerAbi, gitHandlerAddr, gitHandlerContract, solutionAcceptedEvent;
        gitHandlerAddr = r;
        gitHandlerAbi = require('./abi/gitHandlerABI.json');
        gitHandlerContract = new web3.eth.Contract(gitHandlerAbi, gitHandlerAddr);
        solutionAcceptedEvent = tasksHandlerContract.events.TaskSolutionAccepted();
        return solutionAcceptedEvent.on('data', function(event) {
          var patchIPFSHash;
          patchIPFSHash = event.returnValues.patchIPFSHash;
          return gitHandlerContract.methods.getCurrentIPFSHash().call().then(function(masterIPFSHash) {
            var masterPath;
            masterPath = "./tmp/" + masterIPFSHash + "/";
            return git.clone("git@gateway.ipfs.io/ipfs/" + masterIPFSHash.toString(), masterPath, Number.POSITIVE_INFINITY, "master", function(erro, _repo) {
              var repo;
              repo = _repo;
              return repo.remote_add("solution", "gateway.ipfs.io/ipfs/" + patchIPFSHash, (function(_this) {
                return function(err) {
                  return repo.pull("solution", "master", function(er) {
                    return ipfs.util.addFromFs(masterPath, {
                      recursive: true
                    }, function(e, result) {
                      var entry, i, len, results;
                      if (error === null) {
                        results = [];
                        for (i = 0, len = result.length; i < len; i++) {
                          entry = result[i];
                          if (entry.path === masterIPFSHash) {
                            gitHandlerContract.methods.commitTaskSolutionToRepo(event.returnValues.taskId, event.returnValues.solId, entry.hash).send();
                            break;
                          } else {
                            results.push(void 0);
                          }
                        }
                        return results;
                      }
                    });
                  });
                };
              })(this));
            });
          });
        });
      });
    };
  })(this));

}).call(this);

//# sourceMappingURL=git-ipfs.js.map
